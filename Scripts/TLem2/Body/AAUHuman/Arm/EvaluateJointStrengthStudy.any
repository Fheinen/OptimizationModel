
AnyFolder Model = {
  // Model parts included in the moment arm study
  AnyFolder &ThoraxRef = .....HumanFolderRef.Trunk.SegmentsThorax.ThoraxSeg; //This is a reference to the folder which holds the human part of the model
  AnyFolder &ArmSegSideRef = .SideBodyModelRef.ShoulderArm.Seg; //This is a reference to the folder which holds the human part of the model
  AnyFolder &ArmJntsRef =  .SideBodyModelRef.ShoulderArm.Jnt;
  AnyFolder &MusRef = .SideBodyModelRef.ShoulderArm.EvaluateJointStrengthMusRef ;
  //  AnyFolder &LegMusRef = .SideBodyModelRef.Leg.Mus;
  //  AnyFolder &SpineMusRef = .SideTrunkMusRef;
  
  AnyFixedRefFrame ground = {
    AnyRefNode node = { 
      ARel=..ThoraxRef.Axes0;
      sRel=..ThoraxRef.r0;
    };
  };
  
  
  AnyFolder Drivers = {
    AnyVar AngularVelocity = (..RangeOfMotion[1]-..RangeOfMotion[0])*pi/180;
    
    AnyKinMeasureOrg ArmMeasure = {
      AnyKinMeasure &SCProtraction= ...SideBodyInterfaceRef.SternoClavicularProtraction;
      AnyKinMeasure &SCElevation= ...SideBodyInterfaceRef.SternoClavicularElevation;
      AnyKinMeasure &SCAxialRotation= ...SideBodyInterfaceRef.SternoClavicularAxialRotation;
      AnyKinMeasure &GHFlexion= ...SideBodyInterfaceRef.GlenohumeralFlexion;
      AnyKinMeasure &GHAbduction= ...SideBodyInterfaceRef.GlenohumeralAbduction;
      AnyKinMeasure &GHExternalRotation= ...SideBodyInterfaceRef.GlenohumeralExternalRotation;
      AnyKinMeasure &ElbowFlexion= ...SideBodyInterfaceRef.ElbowFlexion;
      AnyKinMeasure &ElbowPronation= ...SideBodyInterfaceRef.ElbowPronation;
      AnyKinMeasure &WristFlexion= ...SideBodyInterfaceRef.WristFlexion;
      AnyKinMeasure &WristAbduction= ...SideBodyInterfaceRef.WristAbduction;  
    };
    
    AnyStdJoint PelvisGround={
      AnyRefFrame &Ground = ..ground.node;
      AnyRefFrame &Sacrum= ..ThoraxRef; 
    };
    
  };// Drivers
  AnyForce JointLoad = {
    AnyKinMeasure &ref = .Drivers.ArmMeasure;
    AnyInt Sign = -round(.Drivers.AngularVelocity/abs(.Drivers.AngularVelocity));
    F = 1*Sign*not(not(.Drivers.ArmDriver.DriverVel));
  };
  
};


AnyBodyStudy Study = {
  Gravity = {0,0,0};
  tStart = 0;
  tEnd = 1;
  nStep = 40;
  InitialConditions.SolverType = KinSolDeterminate;
  Kinematics.SolverType = KinSolDeterminate;
  Kinematics.PosAnalysisOnlyOnOff = On;
  InitialConditions.PosAnalysisOnlyOnOff = On;
  
  InverseDynamics.Criterion.Type = MR_MinMaxStrict;
  
  
  AnyFolder &Model = .Model;
  
  AnyFolder JointStrength = {
    AnyFolder Abscissa  ={
      AnyVar JointAngle = not(not(..Model.Drivers.ArmDriver.DriverVel))*..Model.Drivers.ArmMeasure.Pos'*180/pi;     
    };
    AnyVar JointStrength = max(abs(.Model.JointLoad.F))/(.MaxMuscleActivity+0.00000001);
    
    //AnyVar PsoasMajorT12I = -1*.Model.SpineMusRef.PsoasMajor.PMT12I_TM.LmtDot/.Model.Drivers.AngularVelocity;
  };
  #if (LEFT_LEG_TD_SIMPLE_MUSCLES & RIGHT_LEG_TD_SIMPLE_MUSCLES & TRUNK_SIMPLE_MUSCLES) | (LEFT_LEG_TD_MUS_3E & RIGHT_LEG_TD_MUS_3E & TRUNK_SIMPLE_MUSCLES) 
  
  AnyFolder MuscleEffectiveStrengthCalculations = {
    AnyFolder Abscissa = { 
      AnyVar JointAngle =  not(not(..Model.Drivers.LegDriver.DriverVel))*..Model.Drivers.LegMeasure.Pos'*180/pi  ;    
    };
    
    #define LEGMUSCLES_FOR_OUTPUT_EXPRESSION_PSOAS(name) AnyVar name = ( .Model.MusRef.SpineMuscles.PsoasMajor.name.Strength * .Model.MusRef.SpineMuscles.PsoasMajor.name.Activity);    
    #define LEGMUSCLES_FOR_OUTPUT_EXPRESSION_LEG(name) AnyVar name = ( .Model.MusRef.ArmMuscles.name.Strength *  .Model.MusRef.ArmMuscles.name.Activity);    
    #include "armmuscles_for_output.any"
    #undef LEGMUSCLES_FOR_OUTPUT_EXPRESSION_PSOAS 
    #undef LEGMUSCLES_FOR_OUTPUT_EXPRESSION_LEG
  };
  #endif
};

AnyOperationMacro MacroCmd = 
{
  
  MacroStr = {"operation " + CompleteNameOf(&.Study.InverseDynamics),
    "run"
    #ifdef OUTPUT_SAVE_PATH
    ,
    "classoperation " + CompleteNameOf(&.Study.Output) + strquote("Save data") 
    + " --type=" + strquote("Deep") +" --file=" + strquote(
    OUTPUT_SAVE_PATH + .OutputFileName + ".anydata.h5")
    #endif
  };
};
